"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateForWidget = void 0;
const generateClientTypes_1 = require("./generateClientTypes");
const generatePreviewTypes_1 = require("./generatePreviewTypes");
const helpers_1 = require("./helpers");
const mxExports = [
    "ActionValue",
    "DynamicValue",
    "EditableValue",
    "FileValue",
    "ListValue",
    "NativeIcon",
    "NativeImage",
    "ListActionValue",
    "ListAttributeValue",
    "ListWidgetValue",
    "WebIcon",
    "WebImage"
];
function generateForWidget(widgetXml, widgetName) {
    var _a;
    if (!((_a = widgetXml === null || widgetXml === void 0 ? void 0 : widgetXml.widget) === null || _a === void 0 ? void 0 : _a.properties)) {
        throw new Error("[XML] XML doesn't contains <properties> element");
    }
    if (widgetXml.widget.$.pluginWidget !== "true") {
        throw new Error("[XML] Attribute pluginWidget=true not found. Please review your XML");
    }
    const isNative = widgetXml.widget.$.supportedPlatform === "Native";
    const properties = (widgetXml.widget.properties.length > 0
        ? helpers_1.extractProperties(widgetXml.widget.properties[0])
        : []).filter(prop => prop && prop.$ && prop.$.key);
    const clientTypes = generateClientTypes_1.generateClientTypes(widgetName, properties, isNative);
    const modelerTypes = generatePreviewTypes_1.generatePreviewTypes(widgetName, properties);
    const generatedTypesCode = clientTypes
        .slice(0, clientTypes.length - 1)
        .concat(modelerTypes.slice(0, modelerTypes.length - 1))
        .concat([clientTypes[clientTypes.length - 1], modelerTypes[modelerTypes.length - 1]])
        .join("\n\n");
    const imports = [
        generateImport("react", generatedTypesCode, ["ComponentType", "CSSProperties", "ReactNode"]),
        generateImport("mendix", generatedTypesCode, mxExports)
    ]
        .filter(line => line)
        .join("\n");
    return `/**
 * This file was generated from ${widgetName}.xml
 * WARNING: All changes made to this file will be overwritten
 * @author Mendix UI Content Team
 */
${imports.length ? imports + "\n\n" : ""}${generatedTypesCode}
`;
}
exports.generateForWidget = generateForWidget;
function generateImport(from, code, availableNames) {
    const usedNames = availableNames.filter(type => new RegExp(`\\W${type}\\W`).test(code));
    return usedNames.length ? `import { ${usedNames.join(", ")} } from "${from}";` : "";
}
